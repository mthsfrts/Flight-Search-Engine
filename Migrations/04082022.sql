-- Destination Table responsible for store all the cities and their IATA CODE --

create table destination (id integer generated by default as identity (START WITH 1 INCREMENT BY 1) primary key,
                            iata text, city text);


-- Flight Table responsible for Store all the all the flight details with the destination --

create table details (id integer generated by default as identity (START WITH 1 INCREMENT BY 1) primary key,
                        departure_flight integer, departure_date date, return_flight integer, return_date date,
                        season varchar(100), seats integer, total_days integer, cabin varchar(100),
                        price numeric(10,2), destination_id integer,


                            foreign key (destination_id) references destination(id));

-- Season Update
    -- You can choose what suits best for your need and re-write the "def update_season" on the "flight_database.py file"

UPDATE details
SET    season = CASE
                         WHEN EXTRACT(MONTH from departure_date) < 3 THEN 'Winter'
                         WHEN EXTRACT(MONTH from departure_date) = 3 THEN

                        CASE WHEN EXTRACT(DAY from departure_date) <= 20 THEN 'Winter' ELSE 'Transition to Spring' END

                         WHEN EXTRACT(MONTH from departure_date) < 6 THEN 'Spring'
                         WHEN EXTRACT(MONTH from departure_date) = 6 THEN

                        CASE WHEN EXTRACT(DAY from departure_date) <= 20 THEN 'Spring' ELSE 'Transition to Summer' END

                         WHEN EXTRACT(MONTH from departure_date) < 9 THEN 'Summer'
                         WHEN EXTRACT(MONTH from departure_date) = 9 THEN

                        CASE WHEN EXTRACT(DAY from departure_date) <= 20 THEN 'Summer' ELSE 'Transition to Autumn' END

                         WHEN EXTRACT(MONTH from departure_date) < 12 THEN 'Autumn'
                         WHEN EXTRACT(MONTH from departure_date) = 12 THEN

                        CASE WHEN EXTRACT(DAY from departure_date) <= 20 THEN 'Autumn' ELSE 'Transition to Winter' END
                       END;

UPDATE details
SET   season = CASE
                            WHEN EXTRACT(MONTH FROM departure_date) IN (12,1,2) THEN 'Winter'
                            WHEN EXTRACT(MONTH FROM departure_date) IN (3,4,5) THEN 'Spring'
                            WHEN EXTRACT(MONTH FROM departure_date) IN (6,7,8) THEN 'Summer'
                            WHEN EXTRACT(MONTH FROM departure_date) IN (9,10,11) THEN 'Fall'
                        END;